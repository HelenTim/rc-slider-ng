{
    "sourceFile": "src/Handles/Handle.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1678434929408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1678434929408,
            "name": "Commit-0",
            "content": "import * as React from 'react';\nimport classNames from 'classnames';\nimport KeyCode from 'rc-util/lib/KeyCode';\nimport SliderContext from '../context';\nimport { getDirectionStyle, getIndex } from '../util';\nimport type { OnStartMove } from '../interface';\n\ninterface RenderProps {\n  index: number;\n  prefixCls: string;\n  value: number;\n  dragging: boolean;\n}\n\nexport interface HandleProps {\n  useLess: boolean;\n  prefixCls: string;\n  style?: React.CSSProperties;\n  value: number;\n  valueIndex: number;\n  dragging: boolean;\n  onStartMove: OnStartMove;\n  onOffsetChange: (value: number | 'min' | 'max', valueIndex: number) => void;\n  onFocus?: (e: React.FocusEvent<HTMLDivElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLDivElement>) => void;\n  render?: (origin: React.ReactElement<HandleProps>, props: RenderProps) => React.ReactElement;\n  draged?: boolean;\n}\n\nconst Handle = React.forwardRef((props: HandleProps, ref: React.Ref<HTMLDivElement>) => {\n  const {\n    useLess,\n    prefixCls,\n    value,\n    valueIndex,\n    onStartMove,\n    style,\n    render,\n    dragging,\n    onOffsetChange,\n    draged,\n    ...restProps\n  } = props;\n  const {\n    min,\n    max,\n    direction,\n    disabled,\n    keyboard,\n    range,\n    tabIndex,\n    ariaLabelForHandle,\n    ariaLabelledByForHandle,\n    ariaValueTextFormatterForHandle,\n  } = React.useContext(SliderContext);\n  const handlePrefixCls = `${prefixCls}-handle`;\n\n  const [hover, setHover] = React.useState(false);\n\n  // ============================ Events ============================\n  const onInternalStartMove = (e: React.MouseEvent | React.TouchEvent) => {\n    e.stopPropagation();\n    setHover(true);\n    if (!disabled && !useLess) {\n      onStartMove(e, valueIndex);\n    }\n  };\n\n  // =========================== Keyboard ===========================\n  const onKeyDown: React.KeyboardEventHandler<HTMLDivElement> = (e) => {\n    if (!disabled && !useLess && keyboard) {\n      let offset: number | 'min' | 'max' = null;\n\n      // Change the value\n      switch (e.which || e.keyCode) {\n        case KeyCode.LEFT:\n          offset = direction === 'ltr' || direction === 'btt' ? -1 : 1;\n          break;\n\n        case KeyCode.RIGHT:\n          offset = direction === 'ltr' || direction === 'btt' ? 1 : -1;\n          break;\n\n        // Up is plus\n        case KeyCode.UP:\n          offset = direction !== 'ttb' ? 1 : -1;\n          break;\n\n        // Down is minus\n        case KeyCode.DOWN:\n          offset = direction !== 'ttb' ? -1 : 1;\n          break;\n\n        case KeyCode.HOME:\n          offset = 'min';\n          break;\n\n        case KeyCode.END:\n          offset = 'max';\n          break;\n\n        case KeyCode.PAGE_UP:\n          offset = 2;\n          break;\n\n        case KeyCode.PAGE_DOWN:\n          offset = -2;\n          break;\n      }\n\n      if (offset !== null) {\n        e.preventDefault();\n        onOffsetChange(offset, valueIndex);\n      }\n    }\n  };\n\n  // ============================ Offset ============================\n  const positionStyle = getDirectionStyle(direction, value, min, max);\n\n  // ============================ Render ============================\n  let handleNode = (\n    <div\n      ref={ref}\n      className={classNames(handlePrefixCls, {\n        [`${handlePrefixCls}-${valueIndex + 1}`]: range,\n        [`${handlePrefixCls}-dragging`]: dragging,\n        [`${handlePrefixCls}-useLess`]: useLess,\n        draged: draged,\n      })}\n      style={{\n        ...positionStyle,\n        ...style,\n      }}\n      onMouseDown={onInternalStartMove}\n      onTouchStart={onInternalStartMove}\n      onKeyDown={onKeyDown}\n      tabIndex={disabled || useLess ? null : getIndex(tabIndex, valueIndex)}\n      role=\"slider\"\n      aria-valuemin={min}\n      aria-valuemax={max}\n      aria-valuenow={value}\n      aria-disabled={disabled || useLess}\n      aria-label={getIndex(ariaLabelForHandle, valueIndex)}\n      aria-labelledby={getIndex(ariaLabelledByForHandle, valueIndex)}\n      aria-valuetext={getIndex(ariaValueTextFormatterForHandle, valueIndex)?.(value)}\n      {...restProps}\n    />\n  );\n\n  // Customize\n  if (render) {\n    handleNode = render(handleNode, {\n      index: valueIndex,\n      prefixCls,\n      value,\n      dragging,\n    });\n  }\n\n  return handleNode;\n});\n\nif (process.env.NODE_ENV !== 'production') {\n  Handle.displayName = 'Handle';\n}\n\nexport default Handle;\n"
        }
    ]
}